name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend:
    name: Backend (tests + coverage)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.11' ]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        ports: [ '5432:5432' ]
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v5
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r backend/requirements.txt pytest-cov pip-audit
      - name: Run tests (pytest + coverage)
        env:
          DATABASE_URL: postgresql+psycopg://postgres:postgres@localhost:5432/postgres
        run: |
          PYTHONPATH=. pytest -q --cov=backend --cov-report=xml --cov-report=term
      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-backend
          path: coverage.xml
      - name: pip audit (ignore low severity)
        continue-on-error: true
        run: |
          pip-audit -r backend/requirements.txt --progress-spinner=off || true

  frontend:
    name: Frontend (lint + build)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install deps
        run: |
          cd frontend && npm install
      - name: Lint
        run: |
          cd frontend && npm run lint
      - name: Build
        run: |
          cd frontend && npm run build
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  docker:
    name: Docker (build images)
    runs-on: ubuntu-latest
    needs: [ backend, frontend ]
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v5
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build backend image
        run: |
          docker build -f backend.Dockerfile -t smart-coach-backend:ci .
      - name: Build frontend image
        run: |
          docker build -f frontend.Dockerfile -t smart-coach-frontend:ci .
      - name: (Optional) Login & Push (commented)
        if: false
        run: |
          echo "Add GHCR push when ready. Example:" && echo "echo $GITHUB_TOKEN | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin" && echo "docker tag smart-coach-backend:ci ghcr.io/<owner>/smart-coach-backend:latest" && echo "docker push ghcr.io/<owner>/smart-coach-backend:latest"

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [ backend, frontend ]
    steps:
      - name: Result
        run: |
          echo "Backend & Frontend jobs completed." 
